{"version":3,"file":"cli.js","sources":["../src/utils/cli.ts","../src/options/orm.ts","../src/options/migrations.ts","../src/options/migrator.ts","../src/utils/error-handler.ts","../src/commands/list.ts","../src/commands/checkout.ts","../src/commands/create.ts","../src/cli.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { Command } from 'commander';\n\nexport async function notifyOnTerminal<T>(\n  cmd: Command,\n  msg: string,\n  fn: () => Promise<T>,\n): Promise<T> {\n  // TODO: check cmd verbosity level\n\n  process.stdout.write(chalk.gray(`> ${msg}... `));\n\n  let errored: boolean = false;\n\n  try {\n    return await fn();\n  } catch (err) {\n    process.nextTick(() => error(err));\n  } finally {\n    process.stdout.write(errored ? chalk.red('FAILED') : chalk.green('OK'));\n    process.stdout.write('\\n');\n  }\n}\n\nexport function log(cmd: Command, msg: string) {\n  // TODO: check cmd verbosity level\n  console.log(chalk.gray(msg));\n}\n\nexport function error(err: Error) {\n  console.log(`\n${chalk.redBright(err.name || 'Error')}: ${chalk.white(err.message)}\n${chalk.gray(err.stack.split('\\n').slice(1).join('\\n'))}\n`);\n}\n","import { IContextProvider, IStorageProvider } from '@abmt/core';\nimport { Command, createOption } from 'commander';\nimport { EventEmitter } from 'node:events';\nimport { notifyOnTerminal } from '../utils/cli';\n\nexport enum PlatformKey {\n  Mongoose = 'mongoose',\n  Sequelize = 'sequelize',\n}\n\nconst emitter = new EventEmitter();\n\nexport function setupCmdToOwnORM(cmd: Command) {\n  ///\n  // Handle options\n  const options = [\n    createOption('-o, --orm <orm>')\n      .choices(Object.values(PlatformKey))\n      .default('mongoose')\n      .makeOptionMandatory(true),\n\n    // PlatformKey.Sequelize\n    createOption('--sequelize-uri <sequelizeUri>')\n      .default('sqlite::memory:')\n      .implies({ orm: PlatformKey.Mongoose })\n      .env('SEQUELIZE_URI'),\n\n    // PlatformKey.Mongoose\n    createOption('--mongoose-uri <mongooseUri>')\n      .default('mongodb://127.0.0.1:27017/abmt')\n      .implies({ orm: PlatformKey.Mongoose })\n      .env('MONGOOSE_URI'),\n\n    createOption(\n      '--mongoose-migrations-collection <mongooseMigrationsCollection>',\n    )\n      .implies({ orm: 'mongoose' })\n      .default('abmt_migrations')\n      .env('MONGOOSE_MIGRATIONS_COLLECTION'),\n  ];\n\n  for (const option of options) {\n    cmd.addOption(option);\n  }\n\n  cmd.hook('preAction', () => {\n    emitter.emit('pre-action');\n  });\n  cmd.hook('postAction', () => {\n    emitter.emit('post-action');\n  });\n}\n\nexport async function getORMProviders<Context>(cmd: Command): Promise<{\n  storageProvider: IStorageProvider;\n  contextProvider: IContextProvider<Context>;\n}> {\n  const options = cmd.optsWithGlobals();\n\n  switch (options.orm) {\n    case PlatformKey.Sequelize: {\n      const { SequelizeORM } = require('@abmt/orm-sequelize');\n      const { Sequelize } = require('sequelize');\n\n      const sequelize = new Sequelize(options.sequelizeUri);\n      const orm = new SequelizeORM({\n        sequelize,\n        collection: options.mongooseMigrationsCollection,\n      });\n\n      // handle hooks\n      // wait for the connection to be established\n      await notifyOnTerminal(cmd, 'Connecting to orm', () => sequelize.sync());\n\n      emitter.once('post-action', () => {\n        sequelize.close();\n      });\n\n      return {\n        storageProvider: orm,\n        contextProvider: orm,\n      };\n    }\n\n    case PlatformKey.Mongoose: {\n      const { MongooseORM } = require('@abmt/orm-mongoose');\n      const { createConnection } = require('mongoose');\n\n      const connection = createConnection(options.mongooseUri);\n      const orm = new MongooseORM({\n        connection,\n        collection: options.mongooseMigrationsCollection,\n      });\n\n      // handle hooks\n      // wait for the connection to be established\n      await notifyOnTerminal(cmd, 'Connecting to MongoDB', () =>\n        connection.asPromise(),\n      );\n\n      emitter.once('post-action', () => {\n        connection.close();\n      });\n\n      return {\n        storageProvider: orm,\n        contextProvider: orm,\n      };\n    }\n\n    default:\n      throw new Error('ORM adapter not found');\n  }\n}\n","import { Command, createOption } from 'commander';\nimport { FSMigrationsProvider } from '@abmt/migrations-fs';\n\nexport function setupCmdToOwnMigrations(cmd: Command) {\n  ///\n  // Handle options\n  const migrationsPath = createOption(\n    '-p,--migrations-path <migrationsPath>',\n    'relative or absolute path to the target migrations directory',\n  ).default('./migrations');\n\n  const migrationsPattern = createOption(\n    '--migrations-match-pattern <migrationsPattern>',\n    'relative or absolute path to the target migrations directory',\n  ).default(/\\.(js|ts)/);\n\n  cmd.addOption(migrationsPath);\n  cmd.addOption(migrationsPattern);\n}\n\nexport function getMigrationsProvider(cmd: Command) {\n  const options = cmd.optsWithGlobals();\n\n  return new FSMigrationsProvider({\n    migrationsPath: options.migrationsPath,\n    migrationsPattern: options.migrationsPattern,\n  });\n}\n","import { Migrator } from '@abmt/core';\nimport { Command, createOption } from 'commander';\nimport { getORMProviders } from './orm';\nimport { getMigrationsProvider } from './migrations';\n\nexport function setupCmdToOwnMigrator(cmd: Command) {\n  ///\n  // Handle options\n  const customMigratorPath = createOption(\n    '--custom-migrator-path <customMigratorPath>',\n    'relative or absolute path to a JS or TS file that exposes a migrator builder, either as `getMigrator` or as `default`',\n  ).default('');\n\n  cmd.addOption(customMigratorPath);\n}\n\nexport async function getMigrator(cmd: Command) {\n  const options = cmd.optsWithGlobals();\n\n  if (options.customMigratorPath) {\n    // Attempt to load the `getMigrator` from this file path\n    try {\n      // attempt to load the file\n      const migratorModulePath = require.resolve(options.customMigratorPath, {\n        paths: [process.cwd()],\n      });\n\n      const migratorModule = require(migratorModulePath);\n\n      const getMigrator =\n        (typeof migratorModule == 'function' && migratorModule) ||\n        (typeof migratorModule.getMigrator == 'function' &&\n          migratorModule.getMigrator) ||\n        undefined;\n\n      if (!getMigrator) {\n        throw new Error(\n          `Custom Migrator: Unable to find the 'getMigrator' function`,\n        );\n      }\n\n      // attempt to execute it\n      const migrator = await getMigrator();\n\n      // if (!(migrator instanceof Migrator)) {\n      //   throw new Error(\n      //     \"'getMigrator' function didn't return a valid Migrator instance\",\n      //   );\n      // }\n\n      // valid, lets use it\n      return migrator;\n    } catch (err) {\n      throw new Error(\n        `Custom Migrator: Unable to load migrator at \"${options.migratorPath}\". Please make sure the file exists and a \"getMigrator\" function is exported either as is or as the default exports.`,\n        {\n          cause: err,\n        },\n      );\n    }\n  }\n\n  {\n    return buildMigrator(cmd);\n  }\n}\n\nasync function buildMigrator(cmd: Command) {\n  const { contextProvider, storageProvider } = await getORMProviders(cmd);\n  const migrationsProvider = getMigrationsProvider(cmd);\n\n  const migrator = new Migrator({\n    migrationsProvider,\n    storageProvider,\n    getContext: () => contextProvider.getContext(),\n  });\n\n  await migrator.list();\n\n  return migrator;\n}\n","import { error } from './cli';\n\nexport function captureErrors<Args, T>(\n  fn: (...Args) => Promise<T>,\n): (...Args) => Promise<T> {\n  return async (...args) => {\n    try {\n      const ret = await fn(...args);\n      return ret;\n    } catch (err) {\n      // display error in the CLI\n      error(err);\n    }\n  };\n}\n","import { createCommand } from 'commander';\nimport { getMigrator } from '../options/migrator';\nimport { captureErrors } from '../utils/error-handler';\nimport chalk from 'chalk';\nimport Table from 'cli-table';\n\nexport const listCmd = createCommand('list')\n  .description('lists all the migrations')\n  .action(\n    captureErrors(async () => {\n      const migrator = await getMigrator(listCmd);\n      const migrations = await migrator.list();\n\n      const table = new Table({\n        head: ['ID', 'Type', 'Status', 'Applied At'],\n        rows: migrations.map(({ metadata, status, applied_at }) => [\n          // ID\n          chalk.bold(metadata.id),\n          // TYPE\n          metadata.type,\n          // STATUS\n          (status === 'new' && chalk.whiteBright.bold('NEW')) ||\n            (status === 'up' && chalk.greenBright.bold('UP')) ||\n            (status === 'down' && chalk.red('DOWN')),\n          // APPLIED AT\n          (applied_at && chalk.gray(applied_at.toDateString())) || '',\n        ]),\n      });\n\n      // wrap values with Chalk\n      process.stdout.write(table.toString());\n    }),\n  );\n","import { createCommand } from 'commander';\nimport { getMigrator } from '../options/migrator';\nimport { captureErrors } from '../utils/error-handler';\nimport chalk from 'chalk';\nimport { EventType } from '@abmt/core';\nimport { error, log } from '../utils/cli';\n\nexport const checkoutCmd = createCommand('checkout')\n  .description('migrates the database to a certain version')\n  .argument('[migration-id]', 'ID to the target migration')\n  .action(\n    captureErrors(async (migrationId) => {\n      const migrator = await getMigrator(checkoutCmd);\n\n      migrator.on(EventType.Error, (err) => {\n        error(err);\n      });\n\n      migrator.on(\n        EventType.MigrationDirectionGoingToExecute,\n        ({ migration, direction }) => {\n          log(\n            checkoutCmd,\n            `> Attempting to execute migration ${chalk.white(\n              migration.id,\n            )} - ${chalk.yellowBright(direction)}`,\n          );\n        },\n      );\n\n      migrator.on(\n        EventType.MigrationDirectionExecuted,\n        ({ migration, direction, successful }) => {\n          log(\n            checkoutCmd,\n            successful\n              ? `> Migration ${chalk.white(\n                  migration.id,\n                )} - ${chalk.yellowBright(direction)} was ${chalk.green(\n                  'SUCCESSFULLY EXECUTED',\n                )}`\n              : `> Migration ${chalk.white(\n                  migration.id,\n                )} - ${chalk.yellowBright(direction)} has ${chalk.red(\n                  'FAILED TO EXECUTE',\n                )}`,\n          );\n        },\n      );\n\n      await migrator.checkout(migrationId);\n    }),\n  );\n","import { createCommand, createOption } from 'commander';\nimport { MigrationType } from '@abmt/core';\nimport kebabCase from 'lodash/kebabCase';\nimport { join } from 'node:path';\nimport { writeFile } from 'node:fs/promises';\nimport { getMigrator } from '../options/migrator';\nimport { captureErrors } from '../utils/error-handler';\nimport { log } from '../utils/cli';\n\nexport enum MigrationFormat {\n  Typescript = 'ts',\n  CommonJS = 'cjs',\n  // ESModule = \"mjs\"\n}\n\nexport const createCmd = createCommand('create')\n  .description('creates a new migration')\n  .argument('[name]', 'Migration name')\n  .addOption(\n    createOption('-t, --migration-type', 'migration type')\n      .choices(Object.values(MigrationType))\n      .default(MigrationType.Schema),\n  )\n  .addOption(\n    createOption('-f, --migration-format', 'migration format')\n      .choices(Object.values(MigrationFormat))\n      .default(MigrationFormat.Typescript),\n  )\n  .action(\n    captureErrors(async (optionalName, options) => {\n      const migrator = await getMigrator(createCmd);\n\n      const timestamp = Date.now();\n      const name = kebabCase(optionalName || 'new migration');\n      const migrationFormat = options.migrationFormat as MigrationFormat;\n      const migrationType = options.migrationType as MigrationType;\n\n      const migrationPath = join(\n        migrator.migrationsProvider.migrationsPath,\n        `${timestamp}-${name}.${migrationFormat}`,\n      );\n\n      ///\n      // create migration\n      const content =\n        (migrationFormat === MigrationFormat.Typescript &&\n          createTypescriptMigration(name, timestamp, migrationType)) ||\n        (migrationFormat === MigrationFormat.CommonJS &&\n          createCommonJSMigration(name, timestamp, migrationType)) ||\n        '';\n\n      if (!content) {\n        throw new Error('Unable to create a template for the given migration');\n      }\n\n      // save migration file\n      await writeFile(migrationPath, content);\n\n      log(\n        createCmd,\n        `Migration ${name} was created successfully. Please edit it at \"${migrationPath}\"`,\n      );\n    }),\n  );\n\nfunction createTypescriptMigration(\n  name: string,\n  timestamp: number,\n  type: MigrationType,\n) {\n  const migrationType = Object.entries(MigrationType).find(\n    ([, v]) => v === type,\n  );\n\n  return `\nimport { Migration, MigrationType } from '@abmt/core';\n\nexport default new Migration({\n  metadata: {\n    name: '${name.replace(/'/g, `\\\\\\'`)}',\n    created_at: new Date(${timestamp}),\n    type: MigrationType.${migrationType[0]},\n  },\n\n  async up() {\n    // @TODO: Migration code goes here\n  },\n\n  async down() {\n    // @TODO: Migration code goes here\n  }\n})\n`;\n}\n\nfunction createCommonJSMigration(\n  name: string,\n  timestamp: number,\n  type: MigrationType,\n) {\n  const migrationType = Object.entries(MigrationType).find(\n    ([, v]) => v === type,\n  );\n\n  return `\nconst core = require('@abmt/core');\n\nmodule.exports = new core.Migration({\n  metadata: {\n    name: '${name.replace(/'/g, `\\\\\\'`)}',\n    created_at: new Date(${timestamp}),\n    type: core.MigrationType.${migrationType[0]},\n  },\n\n  up() {\n    // @TODO: Migration code goes here\n  },\n\n  down() {\n    // @TODO: Migration code goes here\n  },\n});\n`;\n}\n","#!/usr/bin/env -S node --experimental-loader tsx\n\nimport { Command } from 'commander';\nimport dotenv from 'dotenv';\n\n// Import commands\nimport { listCmd } from './commands/list';\nimport { setupCmdToOwnORM } from './options/orm';\nimport { setupCmdToOwnMigrations } from './options/migrations';\nimport { checkoutCmd } from './commands/checkout';\nimport { createCmd } from './commands/create';\nimport { setupCmdToOwnMigrator } from './options/migrator';\n\n// import register from '@swc/register';\n// register();\n// register({\n//   module: {\n//     type: 'commonjs',\n//   },\n//   jsc: {\n//     target: 'es5',\n//     keepClassNames: true,\n//     loose: true,\n//     parser: {\n//       syntax: 'typescript',\n//       decorators: true,\n//       dynamicImport: true,\n//     },\n//   },\n// });\n\n(async function main() {\n  dotenv.config({ path: '.env.local' });\n\n  const program = new Command('abmt')\n    .version('PKG_VERSION')\n    .addCommand(listCmd)\n    .addCommand(createCmd)\n    .addCommand(checkoutCmd);\n\n  setupCmdToOwnMigrator(program);\n  setupCmdToOwnORM(program);\n  setupCmdToOwnMigrations(program);\n\n  await program.parseAsync(process.argv);\n\n  process.exit();\n})();\n"],"names":["notifyOnTerminal","cmd","msg","fn","_async_to_generator","errored","err","process","stdout","write","chalk","gray","nextTick","error","red","green","log","console","redBright","name","white","message","stack","split","slice","join","PlatformKey","emitter","EventEmitter","setupCmdToOwnORM","options","createOption","choices","Object","values","default","makeOptionMandatory","implies","orm","env","option","addOption","hook","emit","getORMProviders","SequelizeORM","Sequelize","sequelize","MongooseORM","createConnection","connection","optsWithGlobals","require","sequelizeUri","collection","mongooseMigrationsCollection","sync","once","close","storageProvider","contextProvider","mongooseUri","asPromise","Error","setupCmdToOwnMigrations","migrationsPath","migrationsPattern","getMigrationsProvider","FSMigrationsProvider","setupCmdToOwnMigrator","customMigratorPath","getMigrator","migratorModulePath","migratorModule","migrator","resolve","paths","cwd","undefined","migratorPath","cause","buildMigrator","migrationsProvider","Migrator","getContext","list","captureErrors","args","ret","listCmd","createCommand","description","action","migrations","table","Table","head","rows","map","metadata","status","applied_at","bold","id","type","whiteBright","greenBright","toDateString","toString","checkoutCmd","argument","migrationId","on","EventType","MigrationDirectionGoingToExecute","migration","direction","yellowBright","MigrationDirectionExecuted","successful","checkout","MigrationFormat","createCmd","MigrationType","Schema","optionalName","timestamp","migrationFormat","migrationType","migrationPath","content","Date","now","kebabCase","createTypescriptMigration","createCommonJSMigration","writeFile","entries","find","v","replace","main","program","dotenv","config","path","Command","version","addCommand","parseAsync","argv","exit"],"mappings":"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"}